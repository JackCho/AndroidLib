package com.jit.lib.util;import android.graphics.Bitmap;import android.widget.ImageView;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;import com.nostra13.universalimageloader.core.assist.ImageScaleType;import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;/** *  *  * FileName: ImageLoaderUtil.java * Description：加载图片的ImageLoader，不用担心内存溢出（请在Application里面初始化） * Created by 曹玉斌 on 2014-5-6 * Copyright (c) 2014年 JIT. All rights reserved. * */public class ImageLoaderUtil {		private static DisplayImageOptions mDefaultOptions;	/**	 * 获取圆角图片加载的DisplayImageOptions	 * @param cornerRadiusPixels 圆角半径	 * @return	 */	public static DisplayImageOptions getHeadRoundedImageOptions(int cornerRadiusPixels) {		DisplayImageOptions roundedOptions = new DisplayImageOptions.Builder()					.cacheInMemory(true)					.displayer(new RoundedBitmapDisplayer(cornerRadiusPixels))					// .showImageOnLoading(R.drawable.default_img)					// .showImageOnFail(R.drawable.default_img)					.cacheOnDisc(true).bitmapConfig(Bitmap.Config.RGB_565)					.imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();		return roundedOptions;	}		public static DisplayImageOptions getDefaultImageOptions() {		if (mDefaultOptions == null) {			mDefaultOptions = new DisplayImageOptions.Builder()			.cacheInMemory(true)			// .showImageOnLoading(R.drawable.default_img)			// .showImageOnFail(R.drawable.default_img)			.cacheOnDisc(true).bitmapConfig(Bitmap.Config.RGB_565)			.imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();		}		return mDefaultOptions;	}		/**	 * 通过url加载图片	 * @param iv 	 * @param url	 */	public static void displayImageByUrl(ImageView iv, String url) {		displayImageByUrl(iv, url, null);	}		/**	 * 通过url获取圆角图片	 * @param iv	 * @param url	 * @param radiux	 */	public static void displayImageByUrl(ImageView iv, String url, int radiux) {		displayImageByUrl(iv, url, null, radiux);	}		/**	 * 通过url加载图片，并回调	 * @param iv	 * @param url	 * @param listener	 */	public static void displayImageByUrl(ImageView iv, String url, ImageLoadingListener listener) {		displayImageByUrl(iv, url, listener, 0);	}		/**	 * 通过url获取圆角图片,并回调	 * @param iv	 * @param url	 * @param listener	 * @param radiux	 */	public static void displayImageByUrl(ImageView iv, String url, ImageLoadingListener listener, int radiux) {		ImageLoader loader = ImageLoader.getInstance();		if (radiux == 0) {			loader.displayImage(url, iv, getDefaultImageOptions(), listener);		} else {			loader.displayImage(url, iv, getHeadRoundedImageOptions(DensityUtil.dip2px(iv.getContext(), radiux)), listener);		}	}}