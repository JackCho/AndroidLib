package com.jit.lib.util;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.security.KeyStore;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.HttpVersion;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.message.BasicNameValuePair;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import com.lidroid.xutils.http.client.multipart.MultipartEntity;import com.lidroid.xutils.http.client.multipart.content.FileBody;import com.lidroid.xutils.http.client.multipart.content.StringBody;/** *  *  * FileName: HttpUtil.java * Description： * Created by 曹玉斌 on 2014-5-6 * Copyright (c) 2014年 JIT. All rights reserved. * */public class HttpUtil {	// 设置请求超时15秒钟	private static final int REQUEST_TIMEOUT = 15 * 1000;	// 设置等待数据超时时间15秒钟	private static final int SO_TIMEOUT = 15 * 1000; 	/**	 * 判断网络是否可用	 * @param context	 * @return	 */	public static boolean isNetworkAvailable(Context context) {		ConnectivityManager connManager = (ConnectivityManager) context				.getSystemService(Context.CONNECTIVITY_SERVICE);		if (connManager.getActiveNetworkInfo() != null) {			return connManager.getActiveNetworkInfo().isAvailable();		}		return false;	}	/**	 * HTTP GET请求	 * @param url	 * @param params	 * @return	 */	public static String getRequest(String url, Map<String, String> params) {		int res = 0;		try {			String realUrl = generateUrl(url, params);			HttpClient client = getNewHttpClient();			HttpGet getMethod = new HttpGet(realUrl);			HttpResponse response = client.execute(getMethod);			res = response.getStatusLine().getStatusCode();			if (res == 200) {				StringBuilder builder = new StringBuilder();				BufferedReader reader = new BufferedReader(						new InputStreamReader(response.getEntity().getContent()));				for (String s = reader.readLine(); s != null; s = reader						.readLine()) {					builder.append(s);				}				String result = builder.toString();				return result;			} else {				return "statusCode_" + res;			}		} catch (Exception e) {			e.printStackTrace();			return null;		}	}		/**	 * HTTP POST请求	 * @param url	 * @param params	 * @return	 */	public static String postRequest(String url, Map<String, String> params) {		try {			HttpClient client = getNewHttpClient();			HttpPost postMethod = new HttpPost(url);			List<BasicNameValuePair> pairs = new ArrayList<BasicNameValuePair>();			if (params != null && params.size() > 0) {				Iterator<Entry<String, String>> iterator = params.entrySet().iterator();				while (iterator.hasNext()) {					Entry<String, String> param = iterator.next();					String key = param.getKey();					String value = StringUtils.removeSpecialCharacter(param.getValue());					BasicNameValuePair pair = new BasicNameValuePair(key, value);					pairs.add(pair);					Logger.e("key", key);					Logger.e("value", value);				}				postMethod.setEntity(new UrlEncodedFormEntity(pairs, HTTP.UTF_8));			}			HttpResponse response = client.execute(postMethod);			int statueCode = response.getStatusLine().getStatusCode();			Logger.e("statueCode", statueCode + "");			if (statueCode == 200) {				return EntityUtils.toString(response.getEntity());			}		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * HTTP POST上传文件	 * @param url	 * @param param	 * @param file	 * @param key	 * @return	 * @throws Exception	 */	public static String doPost(String url, Map<String, String> param, File file ,String key)			throws Exception {		HttpPost post = new HttpPost(url);		HttpParams httpParams = new BasicHttpParams();		HttpConnectionParams.setConnectionTimeout(httpParams, REQUEST_TIMEOUT);		HttpConnectionParams.setSoTimeout(httpParams, SO_TIMEOUT);		HttpClient client = new DefaultHttpClient(httpParams);		MultipartEntity entity = new MultipartEntity();		if (param != null && !param.isEmpty()) {			for (Map.Entry<String, String> entry : param.entrySet()) {				Logger.e("test", "key--->" + entry.getKey());				Logger.e("test", "value--->" + entry.getValue());				entity.addPart(entry.getKey(), new StringBody(entry.getValue()));			}		}		if (file != null && file.exists()) {			String type = file.getAbsolutePath().substring(file.getAbsolutePath().lastIndexOf(".") + 1);			entity.addPart(key, new FileBody(file, "image/" + type));		}		post.setEntity(entity);		HttpResponse response = client.execute(post);		int stateCode = response.getStatusLine().getStatusCode();		StringBuffer sb = new StringBuffer();		if (stateCode == HttpStatus.SC_OK) {			HttpEntity result = response.getEntity();			if (result != null) {				InputStream is = result.getContent();				BufferedReader br = new BufferedReader(						new InputStreamReader(is));				String tempLine;				while ((tempLine = br.readLine()) != null) {					sb.append(tempLine);				}			}		}		post.abort();		Logger.e("test", "result---->" + sb.toString());		return sb.toString();	}	/**	 * HTTP POST上传文件	 * @param url	 * @param localPath	 * @return	 */	public static String uploadPic(String url, String localPath) {		String end = "\r\n";		String twoHyphens = "--";		String boundary = "******";		try {			URL url2 = new URL(url);			HttpURLConnection httpURLConnection = (HttpURLConnection) url2.openConnection();			httpURLConnection.setDoInput(true);			httpURLConnection.setDoOutput(true);			httpURLConnection.setUseCaches(false);			httpURLConnection.setRequestMethod("POST");			httpURLConnection.setRequestProperty("Connection", "Keep-Alive");			httpURLConnection.setRequestProperty("Charset", "UTF-8");			httpURLConnection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);			DataOutputStream dos = new DataOutputStream(					httpURLConnection.getOutputStream());			dos.writeBytes(twoHyphens + boundary + end);			dos.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\""					+ localPath.substring(localPath.lastIndexOf("/") + 1,							localPath.lastIndexOf(".")) + ".png" + "\"" + end);			dos.writeBytes(end);			InputStream fis = new FileInputStream(new File(localPath));			byte[] buffer = new byte[1024 * 4]; // 8k			int count = 0;			while ((count = fis.read(buffer)) != -1) {				dos.write(buffer, 0, count);			}			fis.close();			dos.writeBytes(end);			dos.writeBytes(twoHyphens + boundary + twoHyphens + end);			dos.flush();			InputStream is = httpURLConnection.getInputStream();			InputStreamReader isr = new InputStreamReader(is, "utf-8");			BufferedReader br = new BufferedReader(isr);			return br.readLine();		} catch (Exception e) {			e.printStackTrace();		}		return null;	}		/**	 * 获取 HttpClient	 * @return	 */	private static HttpClient getNewHttpClient() {		try {			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());			trustStore.load(null, null);			SSLSocketFactory sf = new SSLSocketFactory(trustStore);			sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);			HttpParams params = new BasicHttpParams();			HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);			HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);			HttpConnectionParams.setConnectionTimeout(params, REQUEST_TIMEOUT);			HttpConnectionParams.setSoTimeout(params, SO_TIMEOUT);			SchemeRegistry registry = new SchemeRegistry();			registry.register(new Scheme("http", PlainSocketFactory					.getSocketFactory(), 80));			registry.register(new Scheme("https", sf, 443));			ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);			return new DefaultHttpClient(ccm, params);		} catch (Exception e) {			return new DefaultHttpClient();		}	}		public static boolean isWifiConnected(Context context) {  	     if (context != null) {  	         ConnectivityManager mConnectivityManager = (ConnectivityManager) context  	                 .getSystemService(Context.CONNECTIVITY_SERVICE);  	         NetworkInfo mWiFiNetworkInfo = mConnectivityManager  	                 .getNetworkInfo(ConnectivityManager.TYPE_WIFI);  	         if (mWiFiNetworkInfo != null) {  	             return mWiFiNetworkInfo.isAvailable();  	         }  	     }  	     return false;  	 }			public static boolean isMobileConnected(Context context) {  	     if (context != null) {  	         ConnectivityManager mConnectivityManager = (ConnectivityManager) context  	                 .getSystemService(Context.CONNECTIVITY_SERVICE);  	         NetworkInfo mMobileNetworkInfo = mConnectivityManager  	                 .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  	         if (mMobileNetworkInfo != null) {  	             return mMobileNetworkInfo.isAvailable();  	         }  	     }  	     return false;  	 }		public static String generateUrl(String url, Map<String, String> params) {		StringBuilder urlBuilder = new StringBuilder(url);		if (null != params) {			urlBuilder.append("?");			Iterator<Entry<String, String>> iterator = params.entrySet()					.iterator();			while (iterator.hasNext()) {				Entry<String, String> param = iterator.next();				String key = param.getKey();				String value = StringUtils.removeSpecialCharacter(param.getValue());				urlBuilder				.append(key)				.append('=')				.append(value);				if (iterator.hasNext()) {					urlBuilder.append('&');				}			}		}		String realUrl = StringUtils.urlEncode(urlBuilder.toString());				//去除url编码对JsonArray的影响		if (realUrl.contains("%22[")) {			realUrl = realUrl.replace("%22[", "[");		}		if (realUrl.contains("]%22")) {			realUrl = realUrl.replace("]%22", "]");		}		Logger.e("test", "realUrl--->" + realUrl);		return realUrl;	}	}